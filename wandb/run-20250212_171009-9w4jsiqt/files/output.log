{'env': {'start': 1, 'step_size': 0.1, 'shape': {'x': 7, 'y': 15}, 'horizon': 40, 'node_weight': 'steiner_covering', 'disc_size': 'small', 'n_players': 3, 'Cx_lengthscale': 2, 'Cx_noise': 0.001, 'Fx_lengthscale': 1, 'Fx_noise': 0.001, 'Cx_beta': 1.5, 'Fx_beta': 1.5, 'generate': False, 'env_file_name': 'env_data.pkl', 'cov_module': 'Matern', 'domains': 'single_room', 'stochasticity': 0}, 'alg': {'gamma': 1, 'type': 'M', 'ent_coef': 0.0, 'epochs': 150, 'lr': 0.005}, 'common': {'a': 1, 'subgrad': 'greedy', 'grad': 'pytorch', 'algo': 'both', 'init': 'deterministic', 'batch_size': 1}, 'visu': {'wb': 'online', 'a': 1}}
x_ticks [-0.5001, -0.4999, 0.4999, 0.5001, 1.4999, 1.5001, 2.4999, 2.5001, 3.4999, 3.5001, 4.4999, 4.5001, 5.4999, 5.5001, 6.4999, 6.5001, 7.4999, 7.5001, 8.4999, 8.5001, 9.4999, 9.5001, 10.4999, 10.5001, 11.4999, 11.5001, 12.4999, 12.5001, 13.4999, 13.5001, 14.4999, 14.5001]
y_ticks [-0.5001, -0.4999, 0.4999, 0.5001, 1.4999, 1.5001, 2.4999, 2.5001, 3.4999, 3.5001, 4.4999, 4.5001, 5.4999, 5.5001, 6.4999, 6.5001]
/Users/devarora/ml/submodular_nn/dqn.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(
/Users/devarora/ml/submodular_nn/dqn.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(
/Users/devarora/ml/submodular_nn/replay_memory.py:12: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(reward).to(self.device), torch.tensor(next_state).float().to(self.device),
tensor([8])
0
/Users/devarora/ml/submodular_nn/replay_memory.py:12: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(reward).to(self.device), torch.tensor(next_state).float().to(self.device),
tensor([9])
0
tensor([11])
0
tensor([8])
0
tensor([7])
0
tensor([7])
6.29981917142868
tensor([6])
7.996858566999435
tensor([6])
7.325141906738281
tensor([11])
7.21183118224144
tensor([9])
7.196523159742355
tensor([7])
6.990814626216888
tensor([7])
6.598030865192413
tensor([10])
6.374204605817795
tensor([13])
6.406621485948563
tensor([6])
6.291899144649506
tensor([7])
6.030762940645218
tensor([9])
5.783137023448944
tensor([8])
5.9050959050655365
tensor([10])
5.540003925561905
tensor([6])
5.611848533153534
tensor([10])
5.433297336101532
tensor([7])
5.208583012223244
tensor([8])
4.963608533143997
tensor([8])
4.821952298283577
tensor([7])
5.071619138121605
tensor([11])
4.888721272349358
tensor([11])
4.9330576956272125
tensor([8])
4.687720820307732
tensor([10])
4.662959307432175
tensor([7])
4.677054405212402
tensor([8])
4.660455733537674
tensor([10])
4.597629010677338
tensor([12])
4.440277993679047
tensor([8])
4.520050972700119
tensor([10])
4.447934523224831
tensor([9])
4.446143671870232
tensor([10])
4.40042245388031
tensor([8])
4.3433782160282135
tensor([9])
4.170528680086136
tensor([8])
4.22746504843235
tensor([10])
4.218541547656059
tensor([10])
4.234419077634811
tensor([8])
4.184908926486969
tensor([6])
4.23356169462204
tensor([10])
4.087175473570824
tensor([9])
4.151404827833176
tensor([8])
4.133473709225655
tensor([10])
4.056626006960869
tensor([9])
4.150628879666328
tensor([8])
4.053699374198914
tensor([7])
3.9948789328336716
tensor([9])
3.9320021718740463
tensor([10])
4.0622919499874115
tensor([6])
3.9590789824724197
Traceback (most recent call last):
  File "/Users/devarora/ml/submodular_nn/main.py", line 87, in <module>
    next_state, reward, done, _ = environment.step(action)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/devarora/ml/submodular_nn/prize_grid_env.py", line 1497, in step
    self.mat_return.append(self.env.weighted_traj_return(self.mat_state, type = self.alg_params["type"]))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/devarora/ml/submodular_nn/prize_grid_env.py", line 955, in weighted_traj_return
    return self.ret_stiener_covering(mat_state, type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/devarora/ml/submodular_nn/prize_grid_env.py", line 1013, in ret_stiener_covering
    for i in range(traj.shape[1]):
             ^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
